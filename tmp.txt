   
   The home page
     1) should have a list of events
     2) should have a time tag for each event
     3) should have a link for each event
     ✓ should not show events that are over
     ✓ should have a link to create a new event
   
   The API
     4) should return an array of upcoming events in JSON format
     5) should allow for searching events by title
   
   The event detail pages
     6) should exist for each event and should have title, image, etc
     7) should allow Yale users to RSVP
     8) should reject RSVPs from Yale addresses
   
   The new event creation page
     ✓ should exist
     ✓ should have a form that can be posted back
     ✓ should have appropriate form fields and labels
   
   The form for creating new events
     ✓ should display errors to the user when the year is not an integer
     ✓ should display errors to the user when the year is more than 2016
     ✓ should display errors to the user when the year is less than 2015
     9) should display errors to the user when the month is not an integer
     10) should display errors to the user when the month is more than 11
     11) should display errors to the user when the month is less than 0
     12) should display errors to the user when the day is not an integer
     13) should display errors to the user when the day is more than 31
     14) should display errors to the user when the day is less than 1
     15) should display errors to the user when the hour is not an integer
     16) should display errors to the user when the hour is more than 23
     17) should display errors to the user when the hour is less than 0
     18) should display errors to the user when the image is not a gif or png
     19) should display errors to the user when the image is not a URL
     20) should display errors to the user when the location is too long
     21) should display errors to the user when the location is empty
     ✓ should display errors to the user when the title is too long
     ✓ should display errors to the user when the title is empty
     22) should redirect the user to the event detail page if the form is valid

   Executed 32 tests in 5 suites in 1s 58ms
       10 passes
       22 failed
   
   22) The form for creating new events should redirect the user to the event detail page if the form is valid
   
       Bad redirect location, it should look like events/4, events/5, etc: expected '/events' to match /events\/\d+\/?$/
       
       at Request._callback (test/test.js:451:48)
       
       450 |       assert.ok(httpResponse.headers.hasOwnProperty('location'), 'http response header should include location.');
       451 |       expect(httpResponse.headers.location).to.match(/events\/\d+\/?$/, 'Bad redirect location, it should look like events/4, events/5, etc');
       452 |       done();
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   21) The form for creating new events should display errors to the user when the location is empty
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   20) The form for creating new events should display errors to the user when the location is too long
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   19) The form for creating new events should display errors to the user when the image is not a URL
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   18) The form for creating new events should display errors to the user when the image is not a gif or png
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   17) The form for creating new events should display errors to the user when the hour is less than 0
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   16) The form for creating new events should display errors to the user when the hour is more than 23
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   15) The form for creating new events should display errors to the user when the hour is not an integer
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   14) The form for creating new events should display errors to the user when the day is less than 1
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   13) The form for creating new events should display errors to the user when the day is more than 31
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   12) The form for creating new events should display errors to the user when the day is not an integer
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   11) The form for creating new events should display errors to the user when the month is less than 0
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   10) The form for creating new events should display errors to the user when the month is more than 11
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   9) The form for creating new events should display errors to the user when the month is not an integer
   
       Expected status code 200, but got302
       
       at Request._callback (test/test.js:430:16)
       
       429 |         assert.ok(err === null, 'Error: ' + err);
       430 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       431 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   8) The event detail pages should reject RSVPs from Yale addresses
   
       No INPUT matching 'email'
       
       at Browser.fill (node_modules/zombie/lib/index.js:838:7)
           at /source/index.js:722:4
           
           721 |     const field = this.field(selector);
           722 |     assert(field && (field.tagName === 'TEXTAREA' || (field.tagName === 'INPUT')), `No INPUT matching '${selector}'`);
           723 |     assert(!field.disabled, 'This INPUT field is disabled');
           
       at test/test.js:263:10
       
       262 |       browser
       263 |         .fill('email', email)
       264 |         .pressButton('Submit', function(){
       
       at Browser.done (node_modules/zombie/lib/eventloop.js:589:11)
           at /source/eventloop.js:445:8
           
           444 |       try {
           445 |         callback(error);
           446 |       } catch (error) {
           
       at node_modules/zombie/lib/document.js:741:13
           at /source/document.js:611:14
           
           610 |     .catch(function(error) {
           611 |       browser.emit('error', error);
           612 |     })
           
       at run (node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js:89:39)
       
       88 |           if(!ok)record.h = true;
       89 |           ret = cb === true ? value : cb(value);
       90 |           if(ret === react.P){
       
       at node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js:100:28
       
        99 |     };
       100 |     while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
       101 |     chain.length = 0;
       
       at flush (node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/$.microtask.js:17:13)
       
       16 |     if(domain)domain.enter();
       17 |     head.fn.call(); // <- currently we use it only for Promise - try / catch not required
       18 |     if(domain)domain.exit();
       
   
   7) The event detail pages should allow Yale users to RSVP
   
       No INPUT matching 'email'
       
       at Browser.fill (node_modules/zombie/lib/index.js:838:7)
           at /source/index.js:722:4
           
           721 |     const field = this.field(selector);
           722 |     assert(field && (field.tagName === 'TEXTAREA' || (field.tagName === 'INPUT')), `No INPUT matching '${selector}'`);
           723 |     assert(!field.disabled, 'This INPUT field is disabled');
           
       at test/test.js:249:10
       
       248 |       browser
       249 |         .fill('email', email)
       250 |         .pressButton('Submit', function(){
       
       at Browser.done (node_modules/zombie/lib/eventloop.js:589:11)
           at /source/eventloop.js:445:8
           
           444 |       try {
           445 |         callback(error);
           446 |       } catch (error) {
           
       at node_modules/zombie/lib/document.js:741:13
           at /source/document.js:611:14
           
           610 |     .catch(function(error) {
           611 |       browser.emit('error', error);
           612 |     })
           
       at run (node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js:89:39)
       
       88 |           if(!ok)record.h = true;
       89 |           ret = cb === true ? value : cb(value);
       90 |           if(ret === react.P){
       
       at node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js:100:28
       
        99 |     };
       100 |     while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
       101 |     chain.length = 0;
       
       at flush (node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/$.microtask.js:17:13)
       
       16 |     if(domain)domain.enter();
       17 |     head.fn.call(); // <- currently we use it only for Promise - try / catch not required
       18 |     if(domain)domain.exit();
       
   
   6) The event detail pages should exist for each event and should have title, image, etc
   
       Couldn't retreive all events at /events/:id.
       
       at test/test.js:229:14
       
       228 |     async.map(testedEventUrls, fetchEventDetail, function(err, results){
       229 |       assert.ok(_.every(results, 'success'), 'Couldn\'t retreive all events at /events/:id.');
       230 |       for (var i = results.length - 1; i >= 0; i--) {
       
       at node_modules/async/lib/async.js:52:16
       
       51 |             if (fn === null) return;
       52 |             fn.apply(this, arguments);
       53 |             fn = null;
       
       at node_modules/async/lib/async.js:361:13
       
       360 |         }, function (err) {
       361 |             callback(err, results);
       362 |         });
       
       at node_modules/async/lib/async.js:52:16
       
       51 |             if (fn === null) return;
       52 |             fn.apply(this, arguments);
       53 |             fn = null;
       
       at done (node_modules/async/lib/async.js:246:17)
       
       245 |             else if (key === null && completed <= 0) {
       246 |                 callback(null);
       247 |             }
       
       at node_modules/async/lib/async.js:44:16
       
       43 |             if (fn === null) throw new Error("Callback was already called.");
       44 |             fn.apply(this, arguments);
       45 |             fn = null;
       
       at node_modules/async/lib/async.js:358:17
       
       357 |                 results[index] = v;
       358 |                 callback(err);
       359 |             });
       
       at test/test.js:225:9
       
       224 |       browser.visit(url, function(){
       225 |         cb(null, browser);
       226 |       });
       
       at Browser.done (node_modules/zombie/lib/eventloop.js:589:11)
           at /source/eventloop.js:445:8
           
           444 |       try {
           445 |         callback(error);
           446 |       } catch (error) {
           
       at node_modules/zombie/lib/document.js:741:13
           at /source/document.js:611:14
           
           610 |     .catch(function(error) {
           611 |       browser.emit('error', error);
           612 |     })
           
       at run (node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js:89:39)
       
       88 |           if(!ok)record.h = true;
       89 |           ret = cb === true ? value : cb(value);
       90 |           if(ret === react.P){
       
       at node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js:100:28
       
        99 |     };
       100 |     while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
       101 |     chain.length = 0;
       
       at flush (node_modules/zombie/node_modules/babel-runtime/node_modules/core-js/library/modules/$.microtask.js:17:13)
       
       16 |     if(domain)domain.enter();
       17 |     head.fn.call(); // <- currently we use it only for Promise - try / catch not required
       18 |     if(domain)domain.exit();
       
   
   5) The API should allow for searching events by title
   
       API not found at /api/events
       
       at Request._callback (test/test.js:173:14)
       
       172 |     request(url, function (error, response, body) {
       173 |       assert.ok(response.statusCode !== 404, 'API not found at /api/events');
       174 |       var data = JSON.parse(body);
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   4) The API should return an array of upcoming events in JSON format
   
       API not found at /api/events
       
       at Request._callback (test/test.js:161:14)
       
       160 |       assert.ok(body !== 'null', 'JSON data has no contents.');
       161 |       assert.ok(response.statusCode !== 404, 'API not found at /api/events');
       162 |       var data = JSON.parse(body);
       
       at Request.self.callback (node_modules/request/request.js:198:22)
       
       197 |       self._callbackCalled = true
       198 |       self._callback.apply(self, arguments)
       199 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1082:10)
       
       1081 |     }
       1082 |     self.emit('complete', response, response.body)
       1083 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:1009:12)
       
       1008 |     responseContent.on('end', function (chunk) {
       1009 |       self.emit('end', chunk)
       1010 |     })
       
       at endReadableNT (_stream_readable.js:893:12)
   
   3) The home page should have a link for each event
   
       Expected some events with links at / (found 0)
       
       at Context.<anonymous> (test/test.js:133:12)
       
       132 |     var numEventsWithLinks = this.browser.queryAll('li.event[id^="event-"] a[href^="/events/"]').length;
       133 |     assert.ok(numEvents === numEventsWithLinks && numEvents > 0, 'Expected ' + (numEvents > 0 ? numEvents : 'some')  + ' events with links at ' + this.browser.location.pathname + ' (found ' + numEventsWithLinks + ')');
       134 |   });
       
   
   2) The home page should have a time tag for each event
   
       Expected some events with time tags at / (found 0)
       
       at Context.<anonymous> (test/test.js:127:12)
       
       126 |     var numEventsWithTime = this.browser.queryAll('li.event[id*="event-"] time[datetime]').length;
       127 |     assert.ok(numEvents === numEventsWithTime && numEvents > 0, 'Expected ' + (numEvents > 0 ? numEvents : 'some')  + ' events with time tags at ' + this.browser.location.pathname + ' (found ' + numEventsWithTime + ')');
       128 |   });
       
   
   1) The home page should have a list of events
   
       Expected list (li) of events on page at /
       
       at Context.<anonymous> (test/test.js:121:12)
       
       120 |   it('should have a list of events', function(){
       121 |     assert.ok(this.browser.query('li.event[id*="event-"]'), 'Expected list (li) of events on page at ' + this.browser.location.pathname);
       122 |   });
       
